// Import des modules standard pour la gestion des collections et du r√©seau
use std::collections::HashMap;
use std::net::UdpSocket;
use std::time::{Duration, SystemTime};

// Import des modules Bevy pour l'ECS et la gestion des syst√®mes
use bevy::prelude::IntoSystemConfigs;
use bevy::prelude::*;
use bevy::time::common_conditions::on_timer;
use bevy::{
    app::{App, Startup, Update},
    asset::AssetPlugin,
    log::LogPlugin,
    MinimalPlugins,
};

// Import des modules renet pour la gestion du r√©seau multijoueur
use bevy_renet::{transport::NetcodeServerPlugin, RenetServerPlugin};
// Import des structures de donn√©es partag√©es entre client et serveur
use multiplayer_demo::{PlayerLobby, RecentlyRespawned};
use renet::{
    transport::{NetcodeServerTransport, ServerAuthentication, ServerConfig},
    ConnectionConfig, RenetServer,
};

// Import des modules locaux du serveur
use resources::SpawnSpots;
use systems::{
    handle_events_system, receive_message_system, receive_shoot_system, send_message_system,
    setup_system,
};

/// Adresse et port sur lesquels le serveur √©coute les connexions
/// "0.0.0.0" signifie que le serveur √©coute sur toutes les interfaces r√©seau
const SERVER_ADDR: &str = "0.0.0.0:5000";

// D√©claration des modules locaux
mod resources;
mod systems;

/// √ânum√©ration d√©finissant les ensembles de syst√®mes du serveur
/// Permet d'organiser l'ex√©cution des syst√®mes dans un ordre sp√©cifique
#[derive(SystemSet, Debug, Hash, PartialEq, Eq, Clone, Copy)]
pub enum ServerSystemSet {
    Events,  // Syst√®mes de gestion des √©v√©nements r√©seau
    Receive, // Syst√®mes de r√©ception des messages clients
    Send,    // Syst√®mes d'envoi des messages aux clients
}

/// Point d'entr√©e principal du serveur
/// Initialise et d√©marre le serveur de jeu multijoueur
fn main() {
    // Cr√©ation d'une nouvelle application Bevy
    let mut app = App::new();

    // Ajout des plugins n√©cessaires au fonctionnement du serveur
    app.add_plugins((
        MinimalPlugins,        // Plugins minimaux de Bevy (pas de rendu)
        AssetPlugin::default(), // Plugin de gestion des assets
        LogPlugin::default(),   // Plugin de logging
        RenetServerPlugin,      // Plugin serveur pour renet
        NetcodeServerPlugin,    // Plugin de transport r√©seau
    ));

    // Cr√©ation et insertion du serveur renet avec la configuration par d√©faut
    let server = RenetServer::new(ConnectionConfig::default());
    app.insert_resource(server);

    // Insertion des ressources globales du serveur
    app.insert_resource(PlayerLobby(HashMap::default())); // Lobby des joueurs connect√©s
    app.insert_resource(SpawnSpots::new());               // Points de spawn du niveau
    app.insert_resource(RecentlyRespawned::default());    // Gestion des respawns r√©cents

    // Configuration de l'adresse r√©seau du serveur
    let server_addr = SERVER_ADDR.parse().unwrap();
    
    // Cr√©ation et liaison du socket UDP pour la communication r√©seau
    let socket = UdpSocket::bind(server_addr).expect("√âchec du bind de l'UDP socket");

    // Configuration du serveur r√©seau avec les param√®tres de connexion
    let server_config = ServerConfig {
        current_time: SystemTime::now()
            .duration_since(SystemTime::UNIX_EPOCH)
            .unwrap(), // Timestamp actuel pour la synchronisation
        max_clients: 10, // Nombre maximum de clients connect√©s simultan√©ment
        protocol_id: 0,  // ID du protocole r√©seau
        public_addresses: vec![server_addr], // Adresses publiques du serveur
        authentication: ServerAuthentication::Unsecure, // Pas d'authentification (d√©veloppement)
    };

    // Cr√©ation du transport r√©seau avec la configuration d√©finie
    let transport = NetcodeServerTransport::new(server_config, socket)
        .expect("√âchec de l'initialisation du transport r√©seau");
    app.insert_resource(transport);

    // Affichage de l'adresse IP locale pour faciliter les tests
    match local_ip_address::local_ip() {
        Ok(ip) => println!("üåê IP locale du serveur : {}", ip),
        Err(e) => eprintln!("‚ùå Erreur IP locale : {}", e),
    }

    // Ajout du syst√®me de configuration initiale (ex√©cut√© au d√©marrage)
    app.add_systems(Startup, setup_system);

    // D√©finition de l'intervalle de mise √† jour fixe (60 FPS)
    let fixed_interval = Duration::from_secs_f32(1.0 / 60.0);

    // Configuration de l'ordre d'ex√©cution des ensembles de syst√®mes
    app.configure_sets(
        Update,
        (
            ServerSystemSet::Events,                    // D'abord les √©v√©nements
            ServerSystemSet::Receive.after(ServerSystemSet::Events), // Puis la r√©ception
            ServerSystemSet::Send.after(ServerSystemSet::Receive),   // Enfin l'envoi
        ),
    );

    // Ajout des syst√®mes de mise √† jour avec leur ordre d'ex√©cution
    app.add_systems(
        Update,
        (
            // Syst√®me de gestion des √©v√©nements r√©seau (connexions/d√©connexions)
            handle_events_system.in_set(ServerSystemSet::Events),
            // Syst√®me de r√©ception des messages des clients
            receive_message_system.in_set(ServerSystemSet::Receive),
            // Syst√®me de traitement des tirs des clients
            receive_shoot_system.in_set(ServerSystemSet::Receive),
            // Syst√®me d'envoi des messages aux clients
            send_message_system.in_set(ServerSystemSet::Send),
        )
            .into_configs() // Conversion en configurations de syst√®mes
            .run_if(on_timer(fixed_interval)), // Ex√©cution √† intervalle fixe
    );

    // D√©marrage de la boucle principale du serveur
    app.run();
}
